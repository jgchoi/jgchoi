Script started on Sun 02 Feb 2014 03:35:34 AM EST
jgchoi@matrix:~/a/a1> whoami
jgchoi
jgchoi@matrix:~/a/a1> cat GS1Prefix.h
//GS1Prefix.h
//
const int MAX = 700;

struct Prefix {
    int  no;             // number of entries
    int  area[MAX];      // area elements
    char pubLow[MAX][8]; // low end of publisher range
    char pubHgh[MAX][8]; // high end of publisher range
    int  pubLen[MAX];    // no of chars in publisher string
};

bool load(const char* filename, Prefix* p);
bool isRegistered(const Prefix* p, int area);
int minNoDigits(const Prefix* p, int area);
bool isRegistered(const Prefix* p, int area, const char* publisher);jgchoi@matrix:~/a/a1> cat GS1Prefix.h[K[K.cpp
//GS1Prefix.cppw
//
#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>

#define  PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

using namespace std;

 bool isRegistered(const Prefix* p, int area)
 {
	int i;

	for(i=0;i<MAX;i++)
		{

		if(p->area[i]==area) //match area in database with database parameter
			return true;
		}
	return false;
 }

 int minNoDigits(const Prefix* p, int area)
 {
	int min=0;
	int i;
		for(i=0;i<MAX;i++)
			{
			if(p->area[i]==area)
				{
				return p->pubLen[i];} //return minimum digit
			}
 
	return 0;
 }
 
 bool isRegistered(const Prefix* p, int area, const char* publisher)
 {
int i; int j; int pubSize = 0;
 long long int pubNum=0, pubHghNum=0, pubLowNum=0;
 
 //calculate publisher size
	for(i=0;publisher[i]!='\0';i++)
		{
		pubSize++;
		}
 
 
 //check publisher
	for(i=0;i<p->no;i++)
		{
		if(p->area[i] == area) //same area code
			{
			if(p->pubLen[i] == pubSize) //same pub length
				{
				for(j=0;j<pubSize;j++)
					{//switch into int
					pubNum = pubNum * 10;
					pubHghNum = pubHghNum * 10;
					pubLowNum = pubLowNum * 10;
					
					pubNum += publisher[j];
					pubHghNum += p->pubHgh[i][j];
					pubLowNum += p->pubLow[i][j];
					}
					
				//compare value
					if(pubNum <= pubHghNum && pubNum >= pubLowNum) //value is match
						{
						return true;
						}	
				}
			
			}
		}
	return false;
 
 }


 // load copies the prefix table from filename into *p
 //
 bool load(const char* filename, Prefix* p) {
     bool rc = false;
     if (filename != nullptr) {
         std::ifstream file(filename);
         if (file.is_open()) {
             int no = 0;
             while (file.good()) {
                 file >> p->area[no] >> p->pubLow[no] >> p->pubHgh[no]; 
                 if (file.good()) {
                     p->pubLen[no] = std::strlen(p->pubLow[no]);
                     no++;
                 }
             }
             if (no > 0) {
                 rc = true;
                 p->no = no;
             }
         }
     }
     return rc;
 }jgchoi@matrix:~/a/a1> cat EAN.h
//EAN.h
//
bool isValid(const char* str);
bool isRegistered(const Prefix* p, const char* stro, char area[], char publisher[], char title[]);jgchoi@matrix:~/a/a1> cat EAN.h[Kcpp
//EAN.cpp
//
#include <iostream>
#include <iomanip>
#include <cstring>

#define  PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

using namespace std;

bool isValid(const char* str)
{
int testFail = 0;
int i;
int sum=0;

		for(i=0;i<=11;i+=2) //add even digit
			{
			sum+=str[i]-'0';
			}
		for(i=1;i<12;i+=2) //add odd digit // need *3
			{
			sum+=(str[i]-'0')*3;
			}
		sum+=str[12]-'0';
		if(sum%10 != 0)
			testFail=1;

	if(testFail == 1)
		return false;
	else
		return true;
}

bool isRegistered(const Prefix* p, const char* str, char area[], char publisher[], char title[])
{
long long int eanNum = 0;
long long int areaNum = 0;
long long int pubDigit = 0;
long long int areaDigit = 0;
int i,j,k;

char pub[8];
char tit[8];
char are[8];

	// conversion
		for(i=3;i<13;i++)
			{
			eanNum = (eanNum * 10) + (str[i]-'0');
			}

	//conversion finished.
		//select area code
		if(eanNum/1000000000 <=7 && eanNum/1000000000>=0) // 1 digit
			{
			areaNum = eanNum/1000000000;
			areaDigit =2;
			}
		else if(eanNum/100000000 <= 92 && eanNum/100000000 >= 80) // 2 digit
			{
			areaNum = eanNum/100000000;
			areaDigit = 3;
			}
		else if(eanNum/10000000 <=989 && eanNum/10000000 >=950) // 3 digit
			{
			areaNum = eanNum/10000000;
			areaDigit = 4;
			}
		else if(eanNum/1000000 <=9989 && eanNum/1000000 >=9946) // 4 digit
			{
			areaNum = eanNum/1000000;
			areaDigit = 5;
			}
		else if(eanNum/100000 <=99944 && eanNum/100000 >=99901) // 5digit
			{
			areaNum = eanNum/100000;
			areaDigit = 6;
			}
		else
			return false; // if area code is not in this category

// check publisher digit
	if(isRegistered(p, areaNum)==false)
		return false;

// get minimum digit
	pubDigit = minNoDigits(p, areaNum);


	//validate pub value
	do{

			//write publisher from str
			for(i=0;i<pubDigit;i++)
				{
				pub[i]=str[areaDigit+2+i];
				}
			//adding \0
			pub[i] = '\0';

		pubDigit++;

			//terminate if publisher code is more than 7
			if(pubDigit > 7)
				return false;

		}while(isRegistered(p, areaNum, pub) == false);

	//copy title value
	i = areaDigit + pubDigit + 1;

		for(j=0;i<12;j++)
			{
			tit[j]=str[i];
			i++;
			}
		tit[j]='\0';


	are[areaDigit-1] = '\0';
	//convert eanNum to string are
	 for(i=areaDigit-2;i>=0;i--)
		{
		are[i] = areaNum%10+'0';
		areaNum = areaNum / 10 ;
		}
	
	//at this point, all test must be passed, otherwise returned false in previous sequence
	//copy all value into main's valuables
	strcpy(area,are);
	strcpy(title,tit);
	strcpy(publisher,pub);

	return true;
}jgchoi@matrix:~/a/a1> g++ -d[Kstd=c++0x a1test.cpp GS1Prefix.cpp EAN.cpp
jgchoi@matrix:~/a/a1> a.out
Passed test    1 (load(nullptr))
Passed test    2 (load(PREFIX))
GS1Prefix Tests
===============
Passed test    3 (isRegistered(prefix, -1))
Passed test    4 (isRegistered(prefix, 99955))
Passed test    5 (isRegistered(prefix, 0))
Passed test    6 (isRegistered(prefix, -1, "0"))
Passed test    7 (isRegistered(prefix, 99955, "0"))
Passed test    8 (isRegistered(prefix, 0, "10"))
Passed test    9 (isRegistered(prefix, 99955, "0"))
Passed test   10 (minNoDigits(prefix, -1))
Passed test   11 (minNoDigits(prefix, 0))
Passed test   12 (minNoDigits(prefix, 92))

GS1 Prefix Tests passed!

EAN Tests
=========
Segmentation fault
jgchoi@matrix:~/a/a1> cat a1main.cpp
#include <iostream>
#include <iomanip>
#include <cstring>

#define  PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

int main() {
    int keepgoing;
    char ean[14];
    Prefix prefix;
    char area[6], publisher[8], title[7];

    std::cout << "EAN Processor\n"
              << "=============\n";

    if (!load(PREFIX_LIST, &prefix))
        std::cerr << "Could not open file " << PREFIX_LIST << std::endl;
    else {
        keepgoing = 1;
        do {
            std::cout << "EAN (0 to quit) : ";
            std::cin.getline(ean, 14);
            if (!std::cin) {
                std::cin.clear();
                std::cin.ignore(2000, '\n');
                std::cerr << "Error. Try Again " << std::endl;
            }
            else if (std::strcmp(ean, "0") == 0) {
                keepgoing = 0;
            }
            else if (std::strlen(ean) != 13) {
                std::cerr << " Incorrect number of digits. Try again." << std::endl;
            }
            else if (isValid(ean) == 0) {
                std::cerr << " Invalid check digit. Try again." << std::endl;
            }
            else if (isRegistered(&prefix, ean, area, publisher,
             title) == 0) {
                std::cerr << " This EAN does not have a registered prefix."
                 << std::endl;
            }
            else {
                std::cout << " Area           : " << area << std::endl;
                std::cout << " Publisher      : " << publisher << std::endl;
                std::cout << " Title          : " << title << std::endl;
            }
            std::cout << std::endl;
        } while (keepgoing == 1);

        std::cout << "Signing off ... " << std::endl;
    }
}
jgchoi@matrix:~/a/a1> g++ -std=c++0x a1main.cpp GS1Prefix.cpp EAN.cpp
jgchoi@matrix:~/a/a1> a.out
EAN Processor
=============
EAN (0 to quit) : 9789070002046
 Area           : 90
 Publisher      : 70002
 Title          : 04

EAN (0 to quit) : 9780003194875
 Invalid check digit. Try again.

EAN (0 to quit) : 978000319487
 Incorrect number of digits. Try again.

EAN (0 to quit) : 978000319487^H   76
 Area           : 0
 Publisher      : 00
 Title          : 319487

EAN (0 to quit) : 97899720000003
Error. Try Again 

EAN (0 to quit) : 9789972000003
 Area           : 9972
 Publisher      : 00
 Title          : 000

EAN (0 to quit) : 9789995500009
 This EAN does not have a registered prefix.

EAN (0 to quit) : 0

Signing off ... 
jgchoi@matrix:~/a/a1> exit
exit

Script done on Sun 02 Feb 2014 03:37:09 AM EST
