Script started on Thu 03 Apr 2014 08:49:22 PM EDT
jgchoi@matrix:~/a/a4> whoami
jgchoi
jgchoi@matrix:~/a/a4> cat Order.h
//Order.h
//
#include "EAN.h"

class iOrder{
	public:
		virtual EAN & getEAN()=0;
		virtual bool add(int)=0;
		virtual bool add(std::istream &)=0;
		virtual bool receive(std::istream& is)=0;
		virtual int outstanding() const=0;
		virtual void display(std::ostream&) const=0;
};

class Order:public iOrder {

	EAN book;
	int ordered;
	int delivered;
	
	public:
		//constructors
		Order();
		virtual ~Order(){}
		Order(const EAN & ean);
		Order(const Order & source);
		
		//virtual ----
		EAN & getEAN();
		bool add(std::istream& is);
		bool add(int n);
		bool receive(std::istream & is);
		int outstanding() const;
		void display(std::ostream & os) const;
};

class SpecialOrder : public Order {
	char instruction[61];
	
	public:
		
		SpecialOrder();
		~SpecialOrder(){}
		SpecialOrder(const EAN & isbn, const char * instr);
		SpecialOrder(const SpecialOrder & source);
		
		//virtual		
		bool add(std::istream & is);
		void display(std::ostream & os) const;
};

std::ostream & operator<<(std::ostream & os, const iOrder & order);jgchoi@matrix:~/a/a4> cat Order.h[Kcpp
//Order.cpp
//
#include <iostream>
#include <iomanip>
#include <cstring>

#include "GS1Prefix.h"
#include "Order.h"

using namespace std;

//--her it is--
std::ostream & operator<<(std::ostream & os, const iOrder & order){
	order.display(os);
}
//--~~!!----

SpecialOrder::SpecialOrder(const SpecialOrder & source):Order(source){
	strcpy(instruction, source.instruction);	
}

void SpecialOrder::display(std::ostream & os) const{
	Order::display(os);
	os << "  "<<instruction<<endl;
}

bool SpecialOrder::add(std::istream & is){
	cout << "Enter quantity : ";
	int tmp;
	bool result;
	is >> tmp;

	result = Order::add(tmp);

	char tmpp[61];
	cout << "Enter Special Instruction : ";
	is.ignore(2000, '\n');
	is.getline(tmpp, 60);
	is.ignore(2000, '\n');
	strcpy(instruction,tmpp);
	return true;
}

SpecialOrder::SpecialOrder():Order(){
	instruction[0] = '\0';
}

SpecialOrder::SpecialOrder(const EAN & isbn, const char * instr):Order(isbn){
	strcpy(instruction, instr);
}

void Order::display(std::ostream & os) const {
	os << setw(17) << right << book << setw(9) << ordered << setw(11) << delivered;
}

Order::Order(const Order & source){
	
	book = source.book;
	ordered = source.ordered;
	delivered = source.delivered;
	}
	
bool Order::receive(std::istream & is){
	int add;
	int keepAsking = 0;
		
	do
		{
			cout << "Quantity (0 to quit) : " ;
			is >> add;
			if(add > ordered)
				{
					cout << add << " not on order.  Only " << ordered << " are on order. Try again." << endl;
				}
			else if( add < 0)
				{
					cout <<"Enter a positive number.  Try again." << endl;
				}
			else if( add == 0)
				{
					cout << "**No delivery recorded!" << endl;
					return false;
				}
			else
				{
					delivered = add;
					return true;
				}
		}
	while(keepAsking == 0);
	
	return false;
}


bool Order::add(int n){
	if( n <= 0 || book.empty() == true)
		cout << "Enter a positive number.  Try again." << endl;
	else
		{
			ordered = ordered + n;
			return true;
		}
		
	return false;
}

bool Order::add(std::istream & is){
	int x = 0;
	int keepAsking = 0;

	do
		{	
			cout << "Quantity (0 to quit) : " ;
			is >> x;
			if(x < 0)
				{
					cout << "Enter a positive number.  Try again." << endl;
				}
			else if( x == 0)
				{	
					cout << "**No ordered recorded!" << endl;
					return false;
				}
			else
				{	
					ordered = ordered + x;
					return true;
				}
		}
	while(keepAsking == 0);
	
	return false;	
}

Order::Order(){
	ordered = 0;
	delivered = 0;
}

Order::Order(const EAN & ean){
	book = ean;
	ordered = 0;
	delivered = 0;
}

EAN & Order::getEAN(){
	return book;
}

int Order::outstanding() const{
	return ordered;
}	
jgchoi@matrix:~/a/a4> exit
exit

Script done on Thu 03 Apr 2014 08:49:42 PM EDT
