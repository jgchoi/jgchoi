Script started on Sun 16 Feb 2014 03:30:24 PM EST
jgchoi@matrix:~/a/a2> whoami
jgchoi
jgchoi@matrix:~/a/a2> cat GS1Prefix.h
//GS1Prefix.h
//
const int MAX = 700;

class Prefix {
    int  no;             // number of entries
    int  area[MAX];      // area elements
    char pubLow[MAX][8]; // low end of publisher range
    char pubHgh[MAX][8]; // high end of publisher range
    int  pubLen[MAX];    // no of chars in publisher string
	
	public:
		Prefix(const char *);
		bool isRegistered(int) const;
		int minNoDigits(int) const;
		bool isRegistered(int, const char *) const;
		
};
jgchoi@matrix:~/a/a2> cat GS1Prefix.cpp
//GS1Prefix.cppw
//
#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>

using namespace std;

#define PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

bool Prefix::isRegistered(int are) const
 {
	int i;

	for(i=0;i<MAX;i++)
		{
		if(area[i]==are) //match area in database with database parameter
			return true;
		}
	return false;
 }

int Prefix::minNoDigits(int are) const
 {
	int i;
	for(i=0;i<MAX;i++)
		{
		if(area[i]==are)
			return pubLen[i]; //return minimum digit
		}
			
	return 0;
 }
 
bool Prefix::isRegistered(int are, const char * pub) const
{
	int i; int j; int pubSize = 0;
	long long int pubNum=0, pubHghNum=0, pubLowNum=0;
 
	//calculate publisher size
	for(i=0;pub[i]!='\0';i++)
		{
		pubSize++;
		}

	
	//check publisher
	for(i=0;i<no;i++)
		{
		if(area[i] == are) //same area code
			{
			if(pubLen[i] == pubSize) //same pub length
				{
				for(j=0;j<pubSize;j++)
					{
					//switch into int
					pubNum = pubNum * 10;
					pubHghNum = pubHghNum * 10;
					pubLowNum = pubLowNum * 10;
					
					pubNum += pub[j]-'0';
					pubHghNum += pubHgh[i][j]-'0';
					pubLowNum += pubLow[i][j]-'0';
					}

				//compare value
				if(pubNum <= pubHghNum && pubNum >= pubLowNum) //value is match
					{
					return true;
					}	
				
				//reset value if fail
				pubHghNum=0;
				pubLowNum=0;
				pubNum=0;
				}
			}
		}
	return false; //if still can't find
 }


 // load copies the prefix table from filename into *p
 //
 Prefix::Prefix(const char* filename) {
     if (filename != nullptr) {
         std::ifstream file(filename);
         if (file.is_open()) {
             no = 0;
             while (file.good()) {
                 file >> area[no] >> pubLow[no] >> pubHgh[no]; 
                 if (file.good()) {
                     pubLen[no] = std::strlen(pubLow[no]);
                     no++;
                 }
             }
             if (no > 0) {
                 no = no;
             }
         }
     }
 }
jgchoi@matrix:~/a/a2> cat EAN.h
//EAN.h
//
class EAN{
	char ean[14];
	char area[8];
	char publisher[8];
	char title[8];
	char s;
	
	bool isRegistered(const Prefix & list);
	
	public:
		EAN();
		EAN(const char * str, const Prefix & list);
		
		bool empty() const;
		bool isRegistered() const;
		void style(char c);
		void toStr(char * str) const;
		void toStrWithStyle(char * str) const;
		void display(std::ostream & os) const;
		bool read(std::istream & is, const Prefix & list);
};

bool isValid(const char* str);
	jgchoi@matrix:~/a/a2> cat EAN.cpp
//EAN.cpp
//
#include <iostream>
#include <iomanip>
#include <cstring>

#define  PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

using namespace std;


bool isValid(const char* str)
{
	int testFail = 0;
	int i;
	int sum=0;

	for(i=0;i<=11;i+=2) //add even digit
		{
		sum+=str[i]-'0';
		}
	for(i=1;i<12;i+=2) //add odd digit // need *3
		{
		sum+=(str[i]-'0')*3;
		}
	sum+=str[12]-'0';
	if(sum%10 != 0)
		testFail=1;

	if(testFail == 1)
		return false;
	else
		return true;
}

EAN::EAN(){	//safe empty
		ean[0]='\0';
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
}


bool EAN::read(std::istream & is, const Prefix & list)
{
	int keepgoing = 1;
 
        do {
            std::cout << "EAN (0 to quit) : ";
            std::cin.getline(ean, 14);
            if (!std::cin) {
                std::cin.clear();
                std::cin.ignore(2000, '\n');
                std::cerr << "Error. Try Again " << std::endl;
            }
            else if (std::strcmp(ean, "0") == 0) {
                keepgoing = 0;
            }
            else if (std::strlen(ean) != 13) {
                std::cerr << " Incorrect number of digits. Try again." << std::endl;
            }
            else if (isValid(ean) == 0) {
                std::cerr << " Invalid check digit. Try again." << std::endl;
            }
            else if (isRegistered(list) == 0) {
                s='\n'; //not registered number, concentrated style
				return true;
            }
            else {
				s='-'; //registered, defaulty have - style
				return true;
            }
        } while (keepgoing == 1);
	return false;
}

void EAN::display(std::ostream & os) const
{	char eanWithStyle[18];
	toStrWithStyle(eanWithStyle);
	
	cout << setw(17) << right << eanWithStyle;
}


void EAN::toStrWithStyle(char * str) const
{	
	int i;

	if(s != '-' && s != ' ') //If style is nor - or ' '
		{
		strcpy(str,ean);
		}
	else
		{
		//copy prefix
		for(i=0;i<3;i++)
			{
			str[i]=ean[i];
			}
			
		//add style char
		str[i]=s;	//3
		i++;	
		str[i]='\0';//4
		
		//area
		strcat(str,area);
		//add style
		str[strlen(area)+i]=s; //4
		i++;
		str[strlen(area)+i]='\0';//5
		
		//publisher
		strcat(str,publisher);
		//add style
		str[strlen(area)+strlen(publisher)+i]=s;//5
		i++;
		str[strlen(area)+strlen(publisher)+i]='\0';//6
		
		//title
		strcat(str,title);
		//add style
		str[strlen(area)+strlen(publisher)+strlen(title)+i]=s;
		i++;
		str[strlen(area)+strlen(publisher)+strlen(title)+i]='\0';
		
		//check digit
		str[16]=ean[12];
		str[17]='\0';
		}
}

void EAN::toStr(char * str) const
{
	strcpy(str,ean);
}

bool EAN::empty() const
{	
	if(ean[0]=='\0')
		return true;
	else
		return false;
}

bool EAN::isRegistered() const
{	
	
	if(area[0] != '\0' && publisher[0] != '\0' && title[0] != '\0')
		return true;
	else
		return false;

}

void EAN::style(char c)
{
	if(c != '-' && c != ' ' && c != '\n' && c != '0')
		s = '\0';
	else
		s = c;
}

EAN::EAN(const char * str, const Prefix & list){
	strcpy(ean,str);
	
	//validation
	if(isValid(str)==false)
		{
		ean[0]='\0';
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
		}
	else if(isRegistered(list)==false)//registration
		{
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
	}
}


bool EAN::isRegistered(const Prefix & list)
{
long long int eanNum = 0;
long long int areaNum = 0;
long long int pubDigit = 0;
long long int areaDigit = 0;
int i,j,k;

char pub[8];
char tit[8];
char are[8];

	// conversion
		for(i=3;i<13;i++)
			{
			eanNum = (eanNum * 10) + (ean[i]-'0');
			}

	//conversion finished.
		//select area code
		if(eanNum/1000000000 <=7 && eanNum/1000000000>=0) // 1 digit
			{
			areaNum = eanNum/1000000000;
			areaDigit =2;
			}
		else if(eanNum/100000000 <= 92 && eanNum/100000000 >= 80) // 2 digit
			{
			areaNum = eanNum/100000000;
			areaDigit = 3;
			}
		else if(eanNum/10000000 <=989 && eanNum/10000000 >=950) // 3 digit
			{
			areaNum = eanNum/10000000;
			areaDigit = 4;
			}
		else if(eanNum/1000000 <=9989 && eanNum/1000000 >=9946) // 4 digit
			{
			areaNum = eanNum/1000000;
			areaDigit = 5;
			}
		else if(eanNum/100000 <=99944 && eanNum/100000 >=99901) // 5digit
			{
			areaNum = eanNum/100000;
			areaDigit = 6;
			}
		else
			return false; // if area code is not in this category

// check publisher digit
	if(list.isRegistered(areaNum)==false)
		return false;

// get minimum digit
	pubDigit = list.minNoDigits(areaNum);


	//validate pub value
	do{

			//write publisher from str
			for(i=0;i<pubDigit;i++)
				{
				pub[i]=ean[areaDigit+2+i];
				}
			//adding \0
			pub[i] = '\0';

		pubDigit++;

			//terminate if publisher code is more than 7
			if(pubDigit > 8)
				{//cout << "pub range over " << endl; 
				return false;}

		}while(list.isRegistered(areaNum, pub) == false);

	//copy title value
	i = areaDigit + pubDigit + 1;

		for(j=0;i<12;j++)
			{
			tit[j]=ean[i];
			i++;
			}
		tit[j]='\0';


	are[areaDigit-1] = '\0';
	//convert eanNum to eaning are
	 for(i=areaDigit-2;i>=0;i--)
		{
		are[i] = areaNum%10+'0';
		areaNum = areaNum / 10 ;
		}
	
	//at this point, all test must be passed, otherwise returned false in previous sequence
	//copy all value into main's valuables
	strcpy(area,are);
	strcpy(title,tit);
	strcpy(publisher,pub);
	s='-';
	return true;
}

jgchoi@matrix:~/a/a2> g++ -std=c++0x a2test.cpp GW[KS1Prefix.cpp EAN.cpp
jgchoi@matrix:~/a/a2> a.out
GS1Prefix Tests
===============
Passed test    1 (isRegistered(-1))
Passed test    2 (isRegistered(99955))
Passed test    3 (isRegistered(0))
Passed test    4 (isRegistered(-1, 0))
Passed test    5 (isRegistered(99955, 0))
Passed test    6 (isRegistered(0, 10))
Passed test    7 (isRegistered(99955, 0))
Passed test    8 (isRegistered(0, 95000000))
Passed test    9 (minNoDigits(-1))
Passed test   10 (minNoDigits(0))
Passed test   11 (minNoDigits(92))
Passed test   12 (minNoDigits(99955))

GS1 Prefix Tests passed!

EAN Tests
=========
Passed test   13 (EAN() and empty())
Passed test   14 (EAN() and isRegistered())
Passed test   15 (EAN("9789070002046", ) and empty())
Passed test   16 (EAN("9789070002046", ) and isRegistered())
Passed test   17 (EAN(9789070002043) and empty())
Passed test   18 (EAN("9789070002043", ) and isRegistered())
Passed test   19 (toStr on EAN() and IBSN("9789070002043", ))
Passed test   20 (EAN(9789070002046) and toStr(char*))
Passed test   21 (EAN(...) and toStr(char*))
Passed test   22 (EAN(9789070002046), style(' ') and toStr(char*))
Passed test   23 (EAN(9789070002046), style('\0') and toStr(char*))
Passed test   24 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   25 (EAN(9789070002046), style(' ') and toStrWithStyle(char*))
Passed test   26 (EAN(9789070002046), style('\0') and toStrWithStyle(char*))
Passed test   27 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   28 (EAN(9789070002043), style('\0') and toStr(char*))

EAN Tests passed!

EAN Registered Tests
====================
Passed test   29 (isRegistered() returned true for 9789070002046)
Passed test   30 (isRegistered() returned true for 9789995500009)
Passed test   31 (isRegistered() returned true for 9780000000002)
Passed test  131 (isRegistered() returned true for 9788070000007)
Passed test  231 (isRegistered() returned true for 9789020000009)
Passed test  331 (isRegistered() returned true for 9789559500001)
Passed test  431 (isRegistered() returned true for 9789679989007)
Passed test  531 (isRegistered() returned true for 9789781990007)
Passed test  631 (isRegistered() returned true for 9789946000008)
Passed test  731 (isRegistered() returned true for 9789961700006)
Passed test  831 (isRegistered() returned true for 9789976999907)
Passed test  931 (isRegistered() returned true for 9789990389005)
Passed test 1031 (isRegistered() returned true for 9789992200001)
Passed test 1131 (isRegistered() returned true for 9789993990000)

EAN Registered Tests passed!


Your Bookstore modules have passed 1151 of 1151 tests

Congratulations!!!   Your Bookstore modules are ready for submission

jgchoi@matrix:~/a/a2> cat a2mi[Kain.cpp GS1Prefix.cpp EAN.cpp
cat: a2main.cpp: No such file or directory
//GS1Prefix.cppw
//
#include <iostream>
#include <iomanip>
#include <cstring>
#include <fstream>

using namespace std;

#define PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

bool Prefix::isRegistered(int are) const
 {
	int i;

	for(i=0;i<MAX;i++)
		{
		if(area[i]==are) //match area in database with database parameter
			return true;
		}
	return false;
 }

int Prefix::minNoDigits(int are) const
 {
	int i;
	for(i=0;i<MAX;i++)
		{
		if(area[i]==are)
			return pubLen[i]; //return minimum digit
		}
			
	return 0;
 }
 
bool Prefix::isRegistered(int are, const char * pub) const
{
	int i; int j; int pubSize = 0;
	long long int pubNum=0, pubHghNum=0, pubLowNum=0;
 
	//calculate publisher size
	for(i=0;pub[i]!='\0';i++)
		{
		pubSize++;
		}

	
	//check publisher
	for(i=0;i<no;i++)
		{
		if(area[i] == are) //same area code
			{
			if(pubLen[i] == pubSize) //same pub length
				{
				for(j=0;j<pubSize;j++)
					{
					//switch into int
					pubNum = pubNum * 10;
					pubHghNum = pubHghNum * 10;
					pubLowNum = pubLowNum * 10;
					
					pubNum += pub[j]-'0';
					pubHghNum += pubHgh[i][j]-'0';
					pubLowNum += pubLow[i][j]-'0';
					}

				//compare value
				if(pubNum <= pubHghNum && pubNum >= pubLowNum) //value is match
					{
					return true;
					}	
				
				//reset value if fail
				pubHghNum=0;
				pubLowNum=0;
				pubNum=0;
				}
			}
		}
	return false; //if still can't find
 }


 // load copies the prefix table from filename into *p
 //
 Prefix::Prefix(const char* filename) {
     if (filename != nullptr) {
         std::ifstream file(filename);
         if (file.is_open()) {
             no = 0;
             while (file.good()) {
                 file >> area[no] >> pubLow[no] >> pubHgh[no]; 
                 if (file.good()) {
                     pubLen[no] = std::strlen(pubLow[no]);
                     no++;
                 }
             }
             if (no > 0) {
                 no = no;
             }
         }
     }
 }
//EAN.cpp
//
#include <iostream>
#include <iomanip>
#include <cstring>

#define  PREFIX_LIST "prefixRanges.txt"
#include "GS1Prefix.h"
#include "EAN.h"

using namespace std;


bool isValid(const char* str)
{
	int testFail = 0;
	int i;
	int sum=0;

	for(i=0;i<=11;i+=2) //add even digit
		{
		sum+=str[i]-'0';
		}
	for(i=1;i<12;i+=2) //add odd digit // need *3
		{
		sum+=(str[i]-'0')*3;
		}
	sum+=str[12]-'0';
	if(sum%10 != 0)
		testFail=1;

	if(testFail == 1)
		return false;
	else
		return true;
}

EAN::EAN(){	//safe empty
		ean[0]='\0';
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
}


bool EAN::read(std::istream & is, const Prefix & list)
{
	int keepgoing = 1;
 
        do {
            std::cout << "EAN (0 to quit) : ";
            std::cin.getline(ean, 14);
            if (!std::cin) {
                std::cin.clear();
                std::cin.ignore(2000, '\n');
                std::cerr << "Error. Try Again " << std::endl;
            }
            else if (std::strcmp(ean, "0") == 0) {
                keepgoing = 0;
            }
            else if (std::strlen(ean) != 13) {
                std::cerr << " Incorrect number of digits. Try again." << std::endl;
            }
            else if (isValid(ean) == 0) {
                std::cerr << " Invalid check digit. Try again." << std::endl;
            }
            else if (isRegistered(list) == 0) {
                s='\n'; //not registered number, concentrated style
				return true;
            }
            else {
				s='-'; //registered, defaulty have - style
				return true;
            }
        } while (keepgoing == 1);
	return false;
}

void EAN::display(std::ostream & os) const
{	char eanWithStyle[18];
	toStrWithStyle(eanWithStyle);
	
	cout << setw(17) << right << eanWithStyle;
}


void EAN::toStrWithStyle(char * str) const
{	
	int i;

	if(s != '-' && s != ' ') //If style is nor - or ' '
		{
		strcpy(str,ean);
		}
	else
		{
		//copy prefix
		for(i=0;i<3;i++)
			{
			str[i]=ean[i];
			}
			
		//add style char
		str[i]=s;	//3
		i++;	
		str[i]='\0';//4
		
		//area
		strcat(str,area);
		//add style
		str[strlen(area)+i]=s; //4
		i++;
		str[strlen(area)+i]='\0';//5
		
		//publisher
		strcat(str,publisher);
		//add style
		str[strlen(area)+strlen(publisher)+i]=s;//5
		i++;
		str[strlen(area)+strlen(publisher)+i]='\0';//6
		
		//title
		strcat(str,title);
		//add style
		str[strlen(area)+strlen(publisher)+strlen(title)+i]=s;
		i++;
		str[strlen(area)+strlen(publisher)+strlen(title)+i]='\0';
		
		//check digit
		str[16]=ean[12];
		str[17]='\0';
		}
}

void EAN::toStr(char * str) const
{
	strcpy(str,ean);
}

bool EAN::empty() const
{	
	if(ean[0]=='\0')
		return true;
	else
		return false;
}

bool EAN::isRegistered() const
{	
	
	if(area[0] != '\0' && publisher[0] != '\0' && title[0] != '\0')
		return true;
	else
		return false;

}

void EAN::style(char c)
{
	if(c != '-' && c != ' ' && c != '\n' && c != '0')
		s = '\0';
	else
		s = c;
}

EAN::EAN(const char * str, const Prefix & list){
	strcpy(ean,str);
	
	//validation
	if(isValid(str)==false)
		{
		ean[0]='\0';
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
		}
	else if(isRegistered(list)==false)//registration
		{
		area[0] = '\0';
		publisher[0] = '\0';
		title[0] = '\0';
	}
}


bool EAN::isRegistered(const Prefix & list)
{
long long int eanNum = 0;
long long int areaNum = 0;
long long int pubDigit = 0;
long long int areaDigit = 0;
int i,j,k;

char pub[8];
char tit[8];
char are[8];

	// conversion
		for(i=3;i<13;i++)
			{
			eanNum = (eanNum * 10) + (ean[i]-'0');
			}

	//conversion finished.
		//select area code
		if(eanNum/1000000000 <=7 && eanNum/1000000000>=0) // 1 digit
			{
			areaNum = eanNum/1000000000;
			areaDigit =2;
			}
		else if(eanNum/100000000 <= 92 && eanNum/100000000 >= 80) // 2 digit
			{
			areaNum = eanNum/100000000;
			areaDigit = 3;
			}
		else if(eanNum/10000000 <=989 && eanNum/10000000 >=950) // 3 digit
			{
			areaNum = eanNum/10000000;
			areaDigit = 4;
			}
		else if(eanNum/1000000 <=9989 && eanNum/1000000 >=9946) // 4 digit
			{
			areaNum = eanNum/1000000;
			areaDigit = 5;
			}
		else if(eanNum/100000 <=99944 && eanNum/100000 >=99901) // 5digit
			{
			areaNum = eanNum/100000;
			areaDigit = 6;
			}
		else
			return false; // if area code is not in this category

// check publisher digit
	if(list.isRegistered(areaNum)==false)
		return false;

// get minimum digit
	pubDigit = list.minNoDigits(areaNum);


	//validate pub value
	do{

			//write publisher from str
			for(i=0;i<pubDigit;i++)
				{
				pub[i]=ean[areaDigit+2+i];
				}
			//adding \0
			pub[i] = '\0';

		pubDigit++;

			//terminate if publisher code is more than 7
			if(pubDigit > 8)
				{//cout << "pub range over " << endl; 
				return false;}

		}while(list.isRegistered(areaNum, pub) == false);

	//copy title value
	i = areaDigit + pubDigit + 1;

		for(j=0;i<12;j++)
			{
			tit[j]=ean[i];
			i++;
			}
		tit[j]='\0';


	are[areaDigit-1] = '\0';
	//convert eanNum to eaning are
	 for(i=areaDigit-2;i>=0;i--)
		{
		are[i] = areaNum%10+'0';
		areaNum = areaNum / 10 ;
		}
	
	//at this point, all test must be passed, otherwise returned false in previous sequence
	//copy all value into main's valuables
	strcpy(area,are);
	strcpy(title,tit);
	strcpy(publisher,pub);
	s='-';
	return true;
}

jgchoi@matrix:~/a/a2> a.out
GS1Prefix Tests
===============
Passed test    1 (isRegistered(-1))
Passed test    2 (isRegistered(99955))
Passed test    3 (isRegistered(0))
Passed test    4 (isRegistered(-1, 0))
Passed test    5 (isRegistered(99955, 0))
Passed test    6 (isRegistered(0, 10))
Passed test    7 (isRegistered(99955, 0))
Passed test    8 (isRegistered(0, 95000000))
Passed test    9 (minNoDigits(-1))
Passed test   10 (minNoDigits(0))
Passed test   11 (minNoDigits(92))
Passed test   12 (minNoDigits(99955))

GS1 Prefix Tests passed!

EAN Tests
=========
Passed test   13 (EAN() and empty())
Passed test   14 (EAN() and isRegistered())
Passed test   15 (EAN("9789070002046", ) and empty())
Passed test   16 (EAN("9789070002046", ) and isRegistered())
Passed test   17 (EAN(9789070002043) and empty())
Passed test   18 (EAN("9789070002043", ) and isRegistered())
Passed test   19 (toStr on EAN() and IBSN("9789070002043", ))
Passed test   20 (EAN(9789070002046) and toStr(char*))
Passed test   21 (EAN(...) and toStr(char*))
Passed test   22 (EAN(9789070002046), style(' ') and toStr(char*))
Passed test   23 (EAN(9789070002046), style('\0') and toStr(char*))
Passed test   24 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   25 (EAN(9789070002046), style(' ') and toStrWithStyle(char*))
Passed test   26 (EAN(9789070002046), style('\0') and toStrWithStyle(char*))
Passed test   27 (EAN(9789070002046), style('-') and toStrWithStyle(char*))
Passed test   28 (EAN(9789070002043), style('\0') and toStr(char*))

EAN Tests passed!

EAN Registered Tests
====================
Passed test   29 (isRegistered() returned true for 9789070002046)
Passed test   30 (isRegistered() returned true for 9789995500009)
Passed test   31 (isRegistered() returned true for 9780000000002)
Passed test  131 (isRegistered() returned true for 9788070000007)
Passed test  231 (isRegistered() returned true for 9789020000009)
Passed test  331 (isRegistered() returned true for 9789559500001)
Passed test  431 (isRegistered() returned true for 9789679989007)
Passed test  531 (isRegistered() returned true for 9789781990007)
Passed test  631 (isRegistered() returned true for 9789946000008)
Passed test  731 (isRegistered() returned true for 9789961700006)
Passed test  831 (isRegistered() returned true for 9789976999907)
Passed test  931 (isRegistered() returned true for 9789990389005)
Passed test 1031 (isRegistered() returned true for 9789992200001)
Passed test 1131 (isRegistered() returned true for 9789993990000)

EAN Registered Tests passed!


Your Bookstore modules have passed 1151 of 1151 tests

Congratulations!!!   Your Bookstore modules are ready for submission

jgchoi@matrix:~/a/a2> ?[Kg++ a2.cpp GS1Prefix.cpp EAN.cpp
GS1Prefix.cpp: In constructor ‘Prefix::Prefix(const char*)’:
GS1Prefix.cpp:89:22: error: ‘nullptr’ was not declared in this scope
jgchoi@matrix:~/a/a2> g++ a2.cpp GS1Prefix.cpp EAN.cpp[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[K[Ks[K-std=c++0x a2.p[Kcpp GS1Prefix.cpp EAN.cpp
jgchoi@matrix:~/a/a2> a.out
EAN Processor
=============

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

EAN (0 to quit) : 9789070002046

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

EAN (0 to quit) : 9780003194875
 Invalid check digit. Try again.
EAN (0 to quit) : 978000319487
 Incorrect number of digits. Try again.
EAN (0 to quit) : 9780003194876

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

EAN (0 to quit) : 97899955000
 Incorrect number of digits. Try again.
EAN (0 to quit) : 9 0
** No EAN added!

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : a

EAN (0 to quit) : 99  9789995500009

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : v

              EAN
-----------------
978-90-70002-04-6
978-0-00-319487-6
    9789995500009

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : f

 EAN Style ('-', ' ', '\n' or '0' to quit) :  

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : v

              EAN
-----------------
978 90 70002 04 6
978 0 00 319487 6
          978    

Please select from the following options :
 A - Add an EAN
 F - Change output style
 V - View all EANs
 Q - Quit
 Your selection : q

jgchoi@matrix:~/a/a2> exit
exit

Script done on Sun 16 Feb 2014 03:34:08 PM EST
